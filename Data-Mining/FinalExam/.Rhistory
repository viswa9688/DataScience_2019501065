n = nchar(str3)
str1l <- tolower(str1)
str1u <-tolower(str2)
str1 <- "HArika is good"
print(str1)
str2 <- 'harika "is" good'
print(str2)
str3 <- paste(str1,str2)
n = nchar(str3)
str1l <- tolower(str1)
str1u <-tolower(str2)
print(str3)
print(str1l)
print(str1u)
print(n)
str1 <- "HArika is good"
print(str1)
str2 <- 'harika "is" good'
print(str2)
str3 <- paste(str1,str2)
n = nchar(str3)
str1l <- tolower(str1)
str1u <-toupper(str2)
print(str3)
print(str1l)
print(str1u)
print(n)
str5 = "Haarika"
str6 = substring(str5,2,5)
str5 = "Haarika"
str6 = substring(str5,2,5)
print(str6)
fibo <- function(int a) {
var1 = 0
var2  = 1
print(var1)
print(var2)
for(x in 1:a) {
var3 = var1 + var2
print(var3)
var1 = var2
var2 = var3
}
}
fibo <- function(int a) {
var1 = 0
var2  = 1
print(var1)
print(var2)
for(x in 1:a) {
var3 = var1 + var2
print(var3)
var1 = var2
var2 = var3
}
}
fibo(5)
fibo <- function(int a) {
var1 = 0
var2  = 1
print(var1)
print(var2)
for(x in 1:a) {
var3 = var1 + var2
print(var3)
var1 = var2
var2 = var3
}
}
fibo(5)
fibo <- function(int a) {
var1 = 0
var2  = 1
print(var1)
print(var2)
for(x in 1:a) {
var3 = var1 + var2
print(var3)
var1 = var2
var2 = var3
}
}
fibo(5)
fibo <- function(a) {
var1 = 0
var2  = 1
print(var1)
print(var2)
for(x in 1:a) {
var3 = var1 + var2
print(var3)
var1 = var2
var2 = var3
}
}
fibo(5)
fibo(5)
fibo(10)
hy <- functiion(name) {
print(paste(hy, name))
}
hy("harika")
hy <- function(name) {
print(paste(hy, name))
}
hy("harika")
hy <- function(name) {
name2 = "hy"
print(paste(name2, name))
}
hy("harika")
hy <- function(name) {
name2 = "hy!"
print(paste(name2, name))
}
hy("harika")
setwd("E:/Second_MSIT/Specialisation/Course - 2/Final exam Remedial")
data = read.csv("BSE_Sensex_Index.csv", header = TRUE)
View(data)
summary(data)
data$Date = as.Date(data$Date, format='%m/%d/%Y')
randomRows = function(df,n){
return(df[sample(nrow(df),n, replace = TRUE),])
}
successive_difference <- function(x) {
n = length(x)
for (i in 1:(length(x))) {
x[i] <- (x[i] - x[i + 1]) / x[i + 1]
}
x[length(x)] = (x[length(x) - 1] + x[length(x) - 2] + x[length(x) - 3]) / 3
return(x)
}
data$Date <- NULL
data$open_new <- successive_difference(data$Open)
data$high_new <- successive_difference(data$High)
data$low_new <- successive_difference(data$Low)
data$close_new <- successive_difference(data$Close)
data$volume_new <- successive_difference(data$Volume)
data$Adj.close_new <- successive_difference(data$Adj.Close)
set.seed(123)
data_1000 = randomRows(data, 1000)
summary(data_1000)
data_3000 = randomRows(data, 3000)
summary(data_3000)
mean(data_1000$open_new)
mean(data_1000$high_new)
mean(data_1000$low_new)
mean(data_1000$close_new)
mean(data_1000$volume_new)
mean(data_1000$Adj.close_new)
var(data_1000$open_new)
var(data_1000$high_new)
var(data_1000$low_new)
var(data_1000$close_new)
var(data_1000$volume_new)
var(data_1000$Adj.close_new)
max(data_1000$open_new)
max(data_1000$high_new)
max(data_1000$low_new)
max(data_1000$close_new)
max(data_1000$volume_new)
max(data_1000$Adj.close_new)
quantile(data_1000$open_new,0.25)
quantile(data_1000$high_new,0.25)
quantile(data_1000$low_new,0.25)
quantile(data_1000$close_new,0.25)
quantile(data_1000$volume_new,0.25)
quantile(data_1000$Adj.close_new,0.25)
mean(data_3000$open_new)
mean(data_3000$high_new)
mean(data_3000$low_new)
mean(data_3000$close_new)
mean(data_3000$volume_new)
mean(data_3000$Adj.close_new)
var(data_3000$open_new)
var(data_3000$high_new)
var(data_3000$low_new)
var(data_3000$close_new)
var(data_3000$volume_new)
var(data_3000$Adj.close_new)
max(data_3000$open_new)
max(data_3000$high_new)
max(data_3000$low_new)
max(data_3000$close_new)
max(data_3000$volume_new)
max(data_3000$Adj.close_new)
quantile(data_3000$open_new,0.25)
quantile(data_3000$high_new,0.25)
quantile(data_3000$low_new,0.25)
quantile(data_3000$close_new,0.25)
quantile(data_3000$volume_new,0.25)
quantile(data_3000$Adj.close_new,0.25)
mean(data$open_new)
mean(data$high_new)
mean(data$low_new)
mean(data$close_new)
mean(data$volume_new)
mean(data$Adj.close_new)
var(data$open_new)
var(data$high_new)
var(data$low_new)
var(data$close_new)
var(data$volume_new)
var(data$Adj.close_new)
max(data$open_new)
max(data$high_new)
max(data$low_new)
max(data$close_new)
max(data$volume_new)
max(data$Adj.close_new)
quantile(data$open_new,0.25)
quantile(data$high_new,0.25)
quantile(data$low_new,0.25)
quantile(data$close_new,0.25)
quantile(data$volume_new,0.25)
quantile(data$Adj.close_new,0.25)
# They appear to be very similar
boxplot(data$Open, data$High, data$Low, data$Adj.close, data$Close)
hist(data$Close, freq = TRUE, w = 2000)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character string or NULL")
if (FALSE) {
if (any(package %in% "base"))
warning("datasets have been moved from package 'base' to package 'datasets'")
if (any(package %in% "stats"))
warning("datasets have been moved from package 'stats' to package 'datasets'")
package[package %in% c("base", "stats")] <- "datasets"
}
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
boxplot(data$Open, data$High, data$Low, data$Adj.close, data$Close)
setwd("C:\\Users\\HARIKA\\Desktop\\FinalExam")
data = read.csv("BSE_Sensex_Index.csv", header = TRUE)
View(data)
summary(data)
data$Date = as.Date(data$Date, format='%m/%d/%Y')
%c(data$Date)
randomRows = function(df,n){
return(df[sample(nrow(df),n, replace = TRUE),])
}
successive_difference <- function(x) {
n = length(x)
for (i in 1:(length(x))) {
x[i] <- (x[i] - x[i + 1]) / x[i + 1]
}
x[length(x)] = (x[length(x) - 1] + x[length(x) - 2] + x[length(x) - 3]) / 3
return(x)
}
data$Date <- NULL
data$open_new <- successive_difference(data$Open)
data$high_new <- successive_difference(data$High)
data$low_new <- successive_difference(data$Low)
data$close_new <- successive_difference(data$Close)
data$volume_new <- successive_difference(data$Volume)
data$Adj.close_new <- successive_difference(data$Adj.Close)
set.seed(123)
data_1000 = randomRows(data, 1000)
summary(data_1000)
data_3000 = randomRows(data, 3000)
summary(data_3000)
mean(data_1000$open_new)
mean(data_1000$high_new)
mean(data_1000$low_new)
mean(data_1000$close_new)
mean(data_1000$volume_new)
mean(data_1000$Adj.close_new)
var(data_1000$open_new)
var(data_1000$high_new)
var(data_1000$low_new)
var(data_1000$close_new)
var(data_1000$volume_new)
var(data_1000$Adj.close_new)
max(data_1000$open_new)
max(data_1000$high_new)
max(data_1000$low_new)
max(data_1000$close_new)
max(data_1000$volume_new)
max(data_1000$Adj.close_new)
quantile(data_1000$open_new,0.25)
quantile(data_1000$high_new,0.25)
quantile(data_1000$low_new,0.25)
quantile(data_1000$close_new,0.25)
quantile(data_1000$volume_new,0.25)
quantile(data_1000$Adj.close_new,0.25)
mean(data_3000$open_new)
mean(data_3000$high_new)
mean(data_3000$low_new)
mean(data_3000$close_new)
mean(data_3000$volume_new)
mean(data_3000$Adj.close_new)
var(data_3000$open_new)
var(data_3000$high_new)
var(data_3000$low_new)
var(data_3000$close_new)
var(data_3000$volume_new)
var(data_3000$Adj.close_new)
max(data_3000$open_new)
max(data_3000$high_new)
max(data_3000$low_new)
max(data_3000$close_new)
max(data_3000$volume_new)
max(data_3000$Adj.close_new)
quantile(data_3000$open_new,0.25)
quantile(data_3000$high_new,0.25)
quantile(data_3000$low_new,0.25)
quantile(data_3000$close_new,0.25)
quantile(data_3000$volume_new,0.25)
quantile(data_3000$Adj.close_new,0.25)
mean(data$open_new)
mean(data$high_new)
mean(data$low_new)
mean(data$close_new)
mean(data$volume_new)
mean(data$Adj.close_new)
var(data$open_new)
var(data$high_new)
var(data$low_new)
var(data$close_new)
var(data$volume_new)
var(data$Adj.close_new)
max(data$open_new)
max(data$high_new)
max(data$low_new)
max(data$close_new)
max(data$volume_new)
max(data$Adj.close_new)
quantile(data$open_new,0.25)
quantile(data$high_new,0.25)
quantile(data$low_new,0.25)
quantile(data$close_new,0.25)
quantile(data$volume_new,0.25)
quantile(data$Adj.close_new,0.25)
# They appear to be very similar
boxplot(data$Open, data$High, data$Low, data$Adj.close, data$Close)
